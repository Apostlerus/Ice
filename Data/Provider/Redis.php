<?php
namespace ice\data\provider;

use ice\core\Data_Provider;
use ice\Exception;

class Redis extends Data_Provider
{
    public static $connections = [];

    /**
     * @param $connection
     * @return boolean
     */
    protected function switchScheme(&$connection)
    {
        return true;
    }

    /**
     * @param $connection
     * @return boolean
     */
    protected function connect(&$connection)
    {
        $connection = new \Redis();
        $isConnected = $connection->connect($this->getOption('host'), $this->getOption('port'));

        if (!$isConnected) {
            $connection->getLastError();
        }

        if (function_exists('igbinary_serialize')) {
            $connection->setOption(\Redis::OPT_SERIALIZER, \Redis::SERIALIZER_IGBINARY);
        } else {
            $connection->setOption(\Redis::OPT_SERIALIZER, \Redis::SERIALIZER_PHP);
        }

        $connection->setOption(\Redis::OPT_PREFIX, 'ice/');

        return $isConnected;

    }

    /**
     * @param $connection
     * @return boolean
     */
    protected function close(&$connection)
    {
        $this->getConnection()->close();
        return true;
    }

    public function get($key = null)
    {
        return $this->getConnection()->get($this->getKey($key));
    }

    public function set($key, $value, $ttl = 3600)
    {
        return $this->getConnection()->set($this->getKey($key), $value, $ttl);
    }

    public function delete($key)
    {
        throw new Exception('Implement delete() method.');
    }

    public function inc($key, $step = 1)
    {
        throw new Exception('Implement inc() method.');
    }

    public function dec($key, $step = 1)
    {
        throw new Exception('Implement dec() method.');
    }

    public function flushAll()
    {
        throw new Exception('Implement flushAll() method.');
    }

    /**
     * @return \Redis
     */
    public function getConnection()
    {
        return parent::getConnection(); // TODO: Change the autogenerated stub
    }


}