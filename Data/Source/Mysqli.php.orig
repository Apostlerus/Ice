<?php
/**
 * Created by PhpStorm.
 * User: dp
 * Date: 30.12.13
 * Time: 23:52
 */

namespace ice\data\source;

use ice\Exception;
use ice\core\Data;
use ice\core\Data_Source;
use ice\core\Model;
use ice\core\Query;
use mysqli_stmt;
use yii\base\ErrorException;

class Mysqli extends Data_Source
{
    /**
     * @param Query $query
     * @throws Exception
     * @return mysqli_stmt
     */
    private function getStatement(Query &$query)
    {
        list($sql, $binds) = $query->getResult();

        fb($query->getResult());

        $statement = $this->getConnection()->prepare($sql);

        if (!$statement) {
            throw new Exception (
                '<u>Не удалось подготовить запрос</u>: ' . "\n" . '<em style="color: green;">' . print_r($query->getResult(), true) . "</em>\n" .
                $this->getConnection()->error,
                $this->getConnection()->errno
            );
        }

        $types = '';
        foreach ($binds as $bind) {
            $types .= gettype($bind)[0];
        }

        $values = array(str_replace('N', 's', $types));

        if (!empty($types)) {
            $values = array_merge($values, $binds);
            if (call_user_func_array(array($statement, 'bind_param'), $this->makeValuesReferenced($values)) === false) {
                throw new Exception('Не удалось забиндить параметры', $query->getResult());
            }
        }

        return $statement;
    }

    private function makeValuesReferenced($arr)
    {
        $refs = array();
        foreach ($arr as $key => $value)
            $refs[$key] = & $arr[$key];
        return $refs;
    }

    /**
     * @param Query $query
     * @throws Exception
     * @return array
     */
    public function select(Query $query)
    {
        $statement = $this->getStatement($query);

        if ($statement->execute() === false) {
            $e = new Exception(
                'sql execute select error #' . $statement->errno . ': ' . $statement->error,
                $query->getResult()
            );

            $statement->close();

            throw $e;
        }
//            $statement->store_result(); // Так почемуто не работает
        $result = $statement->get_result();

        if ($result === false) {
            $e = new Exception (
                'sql get result select error #' . $statement->errno . ': ' . $statement->error,
                $query->getResult()
            );

            $statement->close();

            throw $e;
        }

        $data = array();

        /** @var Model $modelclass */
        $modelclass = $query->getModelClass();

        $data[Data::RESULT_MODEL_CLASS] = $modelclass;

        $data[DATA::RESULT_ROWS] = $modelclass
            ? array_column($result->fetch_all(MYSQLI_ASSOC), null, $modelclass::getPkName())
            : $result->fetch_all(MYSQLI_ASSOC);

        $result->close();

        $data[DATA::NUM_ROWS] = $statement->num_rows;

        $statement->free_result();
        $statement->close();

        return $data;
    }

    /**
     * @param Query $query
     * @throws Exception
     * @return array
     */
    public function insert(Query $query)
    {
        $statement = $this->getStatement($query);

        if ($statement->execute() === false) {
            $e = new Exception (
                'sql execute insert error #' . $statement->errno . ': ' . $statement->error,
                $query->getResult()
            );

            $statement->close();

            throw $e;
        }

        $data = array();

        /** @var Model $modelclass */
        $modelclass = $query->getModelClass();

        $data[Data::RESULT_MODEL_CLASS] = $modelclass;
        $data[DATA::RESULT_ROWS] = $query->getValues();
        $data[DATA::AFFECTED_ROWS] = $statement->affected_rows;
        $data[DATA::INSERT_ID] = $statement->insert_id;

        if ($data[DATA::AFFECTED_ROWS] == 1) {
            $row = reset($data[DATA::RESULT_ROWS]);
            $row[$modelclass::getPkName()] = $data[DATA::INSERT_ID];
            $data[DATA::RESULT_ROWS] = array($row);
        } else {
            throw new Exception('need testing multiinsert in one query');
        }

        $statement->close();

        return $data;
    }

    /**
     * @param Query $query
     * @throws Exception
     * @return array
     */
    public function update(Query $query)
    {
        $statement = $this->getStatement($query);

        if ($statement->execute() === false) {
            $e = new Exception (
                'sql execute update error #' . $statement->errno . ': ' . $statement->error,
                $query->getResult()
            );

            $statement->close();

            throw $e;
        }

        $data = array();
//
//        $data[DATA::AFFECTED_ROWS] = $statement->affected_rows;
//        $data[DATA::INSERT_ID] = $statement->insert_id;

        $statement->close();

        return $data;
    }

    /**
     * @param Query $query
     * @return array
     */
    public function delete(Query $query)
    {
        throw new Exception('Not implemented');
    }

    /**
     * @return \Mysqli
     */
    public function getConnection()
    {
        return parent::getConnection();
    }

    public function getDataScheme()
    {
        $dataScheme = array();

        $sql = 'SELECT * FROM information_schema.columns WHERE TABLE_SCHEMA="' . $this->getScheme() . '"';

        $result = $this->getConnection()->query($sql, MYSQLI_USE_RESULT);

        while ($row = $result->fetch_assoc()) {
            $columnName = $row['COLUMN_NAME'];
            $default = null;

            switch ($row['COLUMN_DEFAULT']) {
                case 'CURRENT_TIMESTAMP' :
                    break;
                default:
                    $default = $row['COLUMN_DEFAULT'];
            }

            if (empty($default) && strstr($columnName, '__json') == '__json') {
                $default = '[]';
            }

            $dataScheme[$row['TABLE_NAME']][$columnName] = array(
                'type' => $row['COLUMN_TYPE'],
                'nullable' => $row['IS_NULLABLE'] == 'YES',
                'default' => $default,
                'comment' => $row['COLUMN_COMMENT']
            );
        }

        $result->close();

        return $dataScheme;
    }
}